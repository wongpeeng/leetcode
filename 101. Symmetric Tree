//递归更快，非递归的话需要两个同时遍历，需要考虑不对称的条件，可能会考虑不全
/////////////
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null) return true;
        if(root.left==null && root.right==null) return true;
        if(root.left==null || root.right==null) return false;
        TreeNode r1=root.left;
        TreeNode r2=root.right;
        Stack<TreeNode> s1=new Stack<>();
        Stack<TreeNode> s2=new Stack<>();
        while((!s1.isEmpty()||r1!=null)&&(!s2.isEmpty()|| r2!=null)){
            while(r1!=null && r2!=null){
                if(r1.val!=r2.val) return false;
                s1.push(r1);
                s2.push(r2);
                r1=r1.left;
                r2=r2.right;
            }//while
            if(r1!=null ||r2!=null) return false;
            if(!s1.isEmpty()&&!s2.isEmpty()){
                r1=s1.pop();
                r1=r1.right;
                r2=s2.pop();
                r2=r2.left;
            }//if
        }//while
        if(r1==null && r2==null) return true;
        else return false;
         
    }
}
///////////////////////
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null) return true;
        return sys(root.left,root.right);
    }
    public boolean sys(TreeNode r1,TreeNode r2){
       if(r1==null && r2==null) return true;
       if(r1==null || r2==null) return false;
       if(r1.val!=r2.val) return false;
       return sys(r1.left,r2.right)&&sys(r2.left,r1.right);
       
    }//
}

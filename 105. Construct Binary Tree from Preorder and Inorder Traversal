//就是确定中序和前序的范围然后递归，但是我的递归比较慢，网上有的递归会比较快，我把代码留下了也，块很多
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length==0) return null;
        int i=0;
        return bt(preorder,inorder,0,0,preorder.length);
    }
    public TreeNode bt(int[] pre, int[] in,int prepos,int inpos,int length){
        TreeNode node=new TreeNode(pre[prepos]);
        if(length==1) return node;
        int i=0;
        for(;i<length;i++){
            if(pre[prepos]==in[inpos+i])
                break;
        }//for
        //////左
        if(i>0) node.left=bt(pre,in,prepos+1,inpos,i);
        /////右
        if(length-i-1>0) node.right=bt(pre,in,prepos+i+1,inpos+i+1,length-i-1);
        
        return node;
    }//bt
}


////////////////////网上的
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
    return build(preorder,inorder,0,inorder.length-1,0);
}

public TreeNode build(int[] preorder,int [] inorder,int in_begin,int in_end,int pre_begin){
    if(in_begin>in_end)
        return null;
    TreeNode root = new TreeNode(preorder[pre_begin]);
    if(in_begin==in_end)
        return root;
    int index = in_end;  // find the index of root in inorder
    while(inorder[index]!=root.val){
        index--;
    }
    root.left = build(preorder,inorder,in_begin,index-1,pre_begin+1);
    root.right = build(preorder,inorder,index+1,in_end,pre_begin+1+(index-in_begin));
    return root;
    
}
}

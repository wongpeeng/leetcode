//Dp没想出来，用的普通的递归，这个肯定会超时
//看了解答写了一下：http://blog.csdn.net/worldwindjp/article/details/19770281
///////////////////////
public class Solution {
    public int numDistinct(String s, String t) {
        if(s.length()<t.length()) return 0;
        //if(s.length()==0||t.length()==0) return 0;//不需要，是0也没关系
        int[][] res=new int[s.length()+1][t.length()+1];
        int i=0;
        for(;i<=s.length();i++)
            res[i][0]=1;//变为空字符串只有一种变法
        //不关心i<j的情况,实际上这种因为字符串只能删除不能增加，值只会是0，放在遍历时看，是不影响结果的
        //我们关系res[i][0]是因为实际存在而且可能会用到
        int j=0;
        for(i=1;i<=s.length();i++)
            for(j=1;j<=t.length();j++){
                res[i][j]=res[i-1][j];//不用考虑[i][i-1],因为这种情况变化不到字符j上
                if(s.charAt(i-1)==t.charAt(j-1))
                   res[i][j]+=res[i-1][j-1];
            }//for
        return res[s.length()][t.length()];
    }
}
////////////////////////
public class Solution {
    public int res;
    public int numDistinct(String s, String t) {
        if(s.length()<t.length()) return 0;
        if(s.length()==t.length()) return s.equals(t)?1:0;
        res=0;
        count(s,0,t,0);
        return res;
    }
    public void count(String s,int p,String t,int q){
        if(q==t.length()){
            if(p<=s.length()) res++;
            return;
        }//if
        for(;p<s.length();p++){
            if(s.charAt(p)==t.charAt(q)){
                if(t.length()-q<=s.length()-p)
                    count(s,p+1,t,q+1);
                else
                    break;
            }//if
        }//for
        return;
    }//count
}

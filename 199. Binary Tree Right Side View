//我的写法，队列，简单想到但是慢
//网上的递归竟然不满，通过层数和list的长度是否相等来判断最右的节点是否已经访问到
public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res=new ArrayList<Integer>();
        if(root==null) return res;
        TreeNode pre=root;
        TreeNode post=root;
        Queue<TreeNode> q1=new LinkedList<TreeNode>();
        Queue<Integer> q2=new LinkedList<Integer>();
        int num1=0;
        q1.add(root);
        q2.add(num1);
        int num2=0;
        while(!q1.isEmpty()){
            post=q1.remove();
            num2=q2.remove();
            if(num1!=num2)
                res.add(pre.val);
            pre=post;
            num1=num2;
            if(post.left!=null){q1.add(post.left);q2.add(num1+1);}
            if(post.right!=null){q1.add(post.right);q2.add(num1+1);}
        }//while
        res.add(pre.val);
        return res;
    }
}

//////////////
public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        rightView(root, result, 0);
        return result;
    }
    
    public void rightView(TreeNode curr, List<Integer> result, int currDepth){
        if(curr == null){
            return;
        }
        if(currDepth == result.size()){
            result.add(curr.val);
        }
        
        rightView(curr.right, result, currDepth + 1);
        rightView(curr.left, result, currDepth + 1);
        
    }
}

///////////////////最简单就是找出从左到右最大的回文，但是会超时
/////看了网上的说要用kmp算法，从右到做匹配字符串字数，最后匹配完的时候的位置，就是最大的回文长度
////然后我又写了一遍很有道理了，要熟练kmp算法，其实就几行，注意，边界控制
public class Solution {
    public String shortestPalindrome(String s) {
        if(s.length()<2) return s;
        StringBuilder temp=new StringBuilder(s);
        int i=s.length()-1;
        while(i>=0){
            if(ispa(temp,i))
                break;
                i--;
        }//while
        if(i==s.length()-1) return s;
        StringBuilder res=new StringBuilder();
        int j=s.length()-1;
        while(i<j){
            res.append(s.charAt(j));
            j--;
        }//while
        res.append(temp);
        return res.toString();
    }
    public boolean ispa(StringBuilder s,int pos){
        if(s.equals("")) return false;
        int i=0;
        int j=pos;
        while(i<=j){
            if(s.charAt(i)!=s.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }//i
}
////////////////////kmp
public class Solution {
    public String shortestPalindrome(String s) {
        if(s.length()<2) return s;
        StringBuilder ss=new StringBuilder(s);
        StringBuilder res=new StringBuilder();
        int[] next=new int[s.length()];
        //////////////////建立kmp数组
        next[0]=-1;
        int j=-1;
        int i=0;
        while(i<s.length()-1){
            if(j==-1||ss.charAt(i)==ss.charAt(j)){
                i++;j++;
                if(ss.charAt(i)!=ss.charAt(j)) next[i]=j;
                else next[i]=next[j];
            }//
            else
                j=next[j];
        }//while
        //////////////////////从左至右进行字符串匹配s自身，匹配结束后我们就可以得到最大匹配长度
        ////匹配代表是回文
        i=ss.length()-1;
        j=0;
        while(i>=0 && j<ss.length()){
           if(j==-1||ss.charAt(i)==ss.charAt(j)){
               i--;
               j++;
           } //
           else
               j=next[j];
        }//
        //////匹配完之后j的值代表，匹配的长度,也代表第一个不是回文的位置
        for(i=ss.length()-1;i>=j;i--){
            res.append(ss.charAt(i));
        }//for
        res.append(ss);
        return res.toString();
        
        
    }
}

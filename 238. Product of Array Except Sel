
//最简单的用了先乘再除，这个要注意0以及数目
public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] product=new int[nums.length];
        int res=1;
        int numZero=0;
        for(int x:nums){
            if(x!=0)
                res=res*x;
            else
                numZero++;
        }//for
        if(numZero>1)
            return product;
        if(numZero==0){
            for(int i=0;i<nums.length;i++)
                product[i]=res/nums[i];
        }//if
        else{
            for(int i=0;i<nums.length;i++)
                if(nums[i]==0) product[i]=res;
        }//else
       
        return product;
        
    }
}

//参考了网上写的，先左边依次乘，然后从右依次乘，怎么个写法会影响代买行数，我写的就比较啰嗦，主要是乘的时候存的位置不好
public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] product=new int[nums.length];
        int res=1;
        int numZero=0;
        product[0]=nums[0];
        for(int i=1;i<nums.length;i++)
            product[i]=nums[i]*product[i-1];
        int i=nums.length-1;
        product[i]=product[i-1];
        for(i=i-1;i>0;i--){
            res=res*nums[i+1];
            product[i]=product[i-1]*res;
        }//for
        product[0]=res*nums[1];
        return product;
        
    }
}

//网上比较好的，不过这个是c++de 
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> res(nums.size(), 1);
        for (int i = 1; i < nums.size(); ++i) {
            res[i] = res[i - 1] * nums[i - 1];
        }
        int right = 1;
        for (int i = nums.size() - 1; i >= 0; --i) {
            res[i] *= right;
            right *= nums[i];
        }
        return res;
    }
}


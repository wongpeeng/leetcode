//从最外层往内找，最后一层的点就是我们需要的，不是一个就是两个点
//因为要控制层，所以需要事先知道每一层的大小来控制
//用dfs会超时，如果不建立图的话基本上也会超时，所以用map表示图，找节点也方便，
//我自己用了dfs，这个是看网上思路写的
public class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> res=new LinkedList<>();
        if(n==1) {res.add(0);return res;}
        int[] indegree=new int[n];
        Map<Integer,Set<Integer>> graph=new HashMap<>();
        for(int i=0;i<n;i++)
            graph.put(i,new HashSet<Integer>());
        for(int i=0;i<edges.length;i++){
            int n1=edges[i][0];int n2=edges[i][1];
            indegree[n1]++;
            indegree[n2]++;
            graph.get(n1).add(n2);
            graph.get(n2).add(n1);
        }//for
        int num=n;
        Queue<Integer> q=new  LinkedList<>();
        for(int i=0;i<n;i++){
            if(indegree[i]==1) q.add(i);
        }//for
        int t;
        int next;
        while(n>2){
           int size=q.size();
           for(int j=0;j<size;j++){
               t=q.remove();
               indegree[t]--;
               n--;
               for(int x:graph.get(t)){
                   indegree[x]--;
                   graph.get(x).remove(t);
                   if(indegree[x]==1) q.add(x);
               }
           }//for
        }//while
        
        while(!q.isEmpty()) res.add(q.remove());
        return res;
        
    }//final
}

//我的思路是最常见的，通过右移判断最低位是否为1决定是否加1，直到数字变为0，
//更好的思路是从二进制形式考虑，1的数目是最低位的值加上这个数字右1一位之后所得到的数字的1的值，而后者我们在之前已经得到
//注意，java的&的优先级比较低，写的时候加括号不然会出错
//my try, not good
//be careful of the num,the order
public class Solution {
    public int[] countBits(int num) {
        int[] bitNum=new int[num+1];
        int count=0;
        int x=0;
        for(int i=0;i<num+1;i++){
            count=0;
            x=i;
            while(x!=0){
                count=count+(x&1);
                x=x>>1;
            }//while
            bitNum[i]=count;
        }//for
        return bitNum;
    }
}

//better solution
//be careful of the priority of &,very important
public class Solution {
    public int[] countBits(int num) {
        int[] bitNum=new int[num+1];
        bitNum[0]=0;
        for(int i=1;i<=num;i++){
            bitNum[i]=bitNum[i>>1]+(i&1);
        }
        return bitNum;
    }
}

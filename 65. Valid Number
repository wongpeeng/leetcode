//这个是看了https://discuss.leetcode.com/topic/54850/adding-my-5ms-java-solution-with-explanations，
//c++我是用条件选择写出来不过过于复杂
//这个的核心思想是从一开始就按照正常的数字进行处理，按照空格，符号，整数部分，如果有小数点的话小数点之后的整数
//然后是之前是真且e存在的话，重置真假结果由后面决定，仍然是符号，整数，最后排除整体的空格。返回真假与位置i==n的与结果，很好理解
//这样我们不需要考虑中间会混杂什么
public class Solution {
    public boolean isNumber(String s) {
        if (s == null) return false;
        if (s.isEmpty()) return true;
        int i=0;
        int n=s.length();
        boolean res=false;
        
        ////跳过空格
        for(;i<n;i++) if(s.charAt(i)!=' ') break;
        //跳过一个符号
        if(i<n&&(s.charAt(i)=='+'||s.charAt(i)=='-' )) i++;
        ///然后是整数部分
        for(;i<n;i++){if(Character.isDigit(s.charAt(i))) res=true;else break;}
        ///判断是否是点是的画判断小数部分
        if(i<n&&s.charAt(i)=='.') {
            i++;
            while(i<n&&Character.isDigit(s.charAt(i))){i++;res=true;}
        }
        //////////在之前是对的前提下判断是否是e是的话判断指数,指数必须是整数
        if(res&&i<n&&s.charAt(i)=='e'){
            i++;res=false;//这里特别注意，因为之前已经对的，所以要重置由后面的决定
            if(i<n&&(s.charAt(i)=='+'||s.charAt(i)=='-')) i++;
            while(i<n &&Character.isDigit(s.charAt(i))) {i++;res=true;}
        }//
        /////跳过空格
        while(i<n&&s.charAt(i)==' ') i++;
        return res&&i==s.length();
        
        }//isnumber
}

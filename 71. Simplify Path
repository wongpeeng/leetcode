//我写的速度比较慢，主要是规则，/.就是上级目录，/..是上上级目录，三个点以上不用管，然后..的前后必须是/
///解答，这个解答写的比较好，就是先按照/进行分割，就好了，因为.其实是保持在当前目录，..才是会退，而x..x这种情况直接压栈
public String simplifyPath(String path) {
    Deque<String> stack = new LinkedList<>();
    Set<String> skip = new HashSet<>(Arrays.asList("..",".",""));
    for (String dir : path.split("/")) {
        if (dir.equals("..") && !stack.isEmpty()) stack.pop();
        else if (!skip.contains(dir)) stack.push(dir);
    }
    String res = "";
    for (String dir : stack) res = "/" + dir + res;
    return res.isEmpty() ? "/" : res;
}
//////////////////////以下是我写的
public class Solution {
    public String simplifyPath(String path) {
        Stack<Character> s=new Stack<>();
        StringBuilder res=new StringBuilder();
        s.push('/');
        for(int i=0;i<path.length();i++){
            if(path.charAt(i)!='/'&&path.charAt(i)!='.')
                s.push(path.charAt(i));
            else{
                if(path.charAt(i)=='/'){
                    if(i==path.length()-1) continue;
                    else if(!s.isEmpty()&&s.peek()!='/')s.push('/');
                }//if
                else{
                    int num=0;
                    while(i<path.length()){
                        if(path.charAt(i)=='.'){num++;i++;}
                        else{i--;break;}
                    }//while
                    if(num<3&&s.peek()=='/'&&(i>=path.length()-1||path.charAt(i+1)=='/')){
                        if(num==1){if(s.peek()=='/'&&s.size()>1) s.pop();continue;}
                        if(num==2){if(s.peek()=='/'&&s.size()>1) s.pop();
                            while(!s.isEmpty()){
                                if(s.peek()!='/') s.pop();
                                else {if(s.size()!=1) s.pop();break;}
                            }//while
                            continue;}
                    }//if
                     while(num>0){s.push('.');num--;}   
                }//else
            }//else
        }//for
        if(s.size()>1&&s.peek()=='/')s.pop();
        while(!s.isEmpty())
            res.insert(0,s.pop());
        return res.toString();
    }//sp
}

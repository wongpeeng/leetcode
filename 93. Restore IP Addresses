//递归，注意判断长度，另外ip的一小段的开头不是个位数时不能是0；
public class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> res=new LinkedList<>();
        if(s.length()<4||s.length()>12) return res;
        StringBuilder temp=new StringBuilder();
        ip(res,s,0,temp,1);
        return res;
    }
    public void ip(List<String> res,String s,int pos, StringBuilder temp,int depth){
        if(pos==s.length()){
            if(depth==5) res.add(temp.toString());
            return;
        }
        if(depth!=1)temp.append('.');
        /////////////3位
        if(pos+2<s.length()&&s.charAt(pos)!='0'){
            if(Integer.parseInt(s.substring(pos,pos+3))<256){
             temp.append(new StringBuilder(s.substring(pos,pos+3)));
             ip(res,s,pos+3,temp,depth+1);
             temp.delete(temp.length()-3,temp.length());}
        }
        ////////////2位
        if(pos+1<s.length()&&s.charAt(pos)!='0'){
             temp.append(new StringBuilder(s.substring(pos,pos+2)));
             ip(res,s,pos+2,temp,depth+1);
        
        temp.delete(temp.length()-2,temp.length());}
        //////////1位
        if(pos<s.length()){
             temp.append(new StringBuilder(s.substring(pos,pos+1)));
             ip(res,s,pos+1,temp,depth+1);
        
        temp.delete(temp.length()-1,temp.length());}
        if(depth!=1) temp.delete(temp.length()-1,temp.length());
        return;
    }//ip
}

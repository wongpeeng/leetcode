//非递归方法，就是正常的inorder遍历，不同的是我们需要首先找到pre值，比较慢
//我也想用非递归，但是没想到怎么控制递归返回值，查了一下网上，通过比较节点的值与最大值和最小值
//关键就是这个最大值和最小值，刚开始是int的MaxValue和MinValue,之后就根据p值来分
/////////////////////////////////
public class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root==null) return true;
        if(root.right==null && root.left==null) return true;
        return bst(root);
    }//
    public boolean bst(TreeNode root){
        int pre=0;
        int post=0;
        Stack<TreeNode> s=new Stack<TreeNode>();
        while(root!=null){
            pre=root.val;
            s.push(root);
            root=root.left;
        }//
        root=s.pop();
        root=root.right;
        while(!s.isEmpty()||root!=null){
            while(root!=null){
                s.add(root);
                root=root.left;
            }//while
            if(!s.isEmpty()){
                root=s.pop();
                post=root.val;
                if(pre>=post) return false;
                pre=post;
                root=root.right;
            }//if
        }//while
        return true;
    }//bst
}


/////////////////////////////////
public class Solution {
    public boolean isValidBST(TreeNode root) {
    return isValidBST(root, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);    
}
 
public boolean isValidBST(TreeNode p, double min, double max){
    if(p==null) 
        return true;
 
    if(p.val <= min || p.val >= max)
        return false;
 
    return isValidBST(p.left, min, p.val) && isValidBST(p.right, p.val, max);
}
}
